{-
 - K-language grammar
 - by Piotr Dobrowolski 
 - (291528)
 -}

-- COMMENTS
comment "//";
comment "/*" "*/";
comment "#";

-- ENTRYPOINTS
entrypoints Program, Stm, Exp;


-- PROGRAM DEFINITION
Progr.  Program ::= [DGlobalDeclaration];
terminator nonempty DGlobalDeclaration "";



--GLOBALS
DFunction.  DGlobalDeclaration ::= Function_def;
DGlobal.    DGlobalDeclaration ::= Dec;
DNamespace. DGlobalDeclaration ::= Namespace;

NewFunction.    Function_def ::= Type_specifier Declarator "{" [StmOrDec] "}";

Declarators.    Dec ::= Type_specifier [Init_declarator] ";";
terminator nonempty Dec "";

NSDeclarator.  Namespace ::= "namespace" Ident "{" [Function_def] "}";
terminator Function_def "";



-- TYPES
rules Type_specifier ::= "int" | "float" | "bool" | Struct_spec;

Named.      Struct_spec ::= "struct" Ident "{" [Dec] "}";
Unnamed.    Struct_spec ::= "struct" "{" [Dec] "}";
Type.       Struct_spec ::= "struct" Ident;


-- DECLARATORS

VarName.        Declarator ::= Ident;
FunctionName.   Declarator ::= Declarator "(" [Parameter] ")";

SingleParam.    Parameter ::= Type_specifier Declarator; 
separator Parameter ",";

OnlyDecl.  Init_declarator ::= Declarator;
InitDecl.  Init_declarator ::= Declarator "=" Initializer;
separator nonempty Init_declarator ",";

InitExpr.   Initializer ::= Exp2;
InitList.   Initializer ::= "{" [Initializer] "}";
separator nonempty Initializer ",";



-- STATEMENTS
ListS.    Stm ::= "{" [StmOrDec] "}";
DecS.     Stm ::= DecStm;
ExprS.    Stm ::= ExpStm;
IfS.      Stm ::= If_stm;
IterS.    Stm ::= Iter_stm;
JumpS.    Stm ::= Jump_stm;
separator nonempty Stm "";

SStm.   StmOrDec ::= Stm;
SDec.   StmOrDec ::= Dec;
terminator StmOrDec "";

Sempty. ExpStm ::= ";";
Sexpr.  ExpStm ::= Exp ";";


Dempty. DecStm ::= ";";
Ddec.   DecStm ::= Dec ; --without ";" because Dec has it

SIf.        If_stm ::= "if" "(" Exp ")" Stm;
SIfElse.    If_stm ::= "if" "(" Exp ")" Stm "else" Stm;

SiterWhile. Iter_stm ::= "while" "(" Exp ")" Stm;
SiterFor.   Iter_stm ::= "for" "(" DecStm ExpStm Exp ")" Stm;

SjumpTwo.   Jump_stm ::= "continue" ";";
SjumpThree. Jump_stm ::= "break" ";";
SjumpFour.  Jump_stm ::= "return" ";";
SjumpFive.  Jump_stm ::= "return" Exp ";";



-- TOKENS
token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));
token Boolean ('t''r''u''e' | 'f''a''l''s''e');


-- EXPRESSIONS
Ecomma.     Exp   ::= Exp "," Exp2;
Eassign.    Exp2  ::= Ident "=" Exp2;
Econdition. Exp3  ::= Exp4 "?" Exp ":" Exp3;
Elor.       Exp4  ::= Exp4 "||" Exp5;
Eland.      Exp5  ::= Exp5 "&&" Exp6;
Eeq.        Exp6  ::= Exp6 "==" Exp7;
Eneq.       Exp6  ::= Exp6 "!=" Exp7;
Elthen.     Exp7 ::= Exp7 "<" Exp8;
Egrthen.    Exp7 ::= Exp7 ">" Exp8;
Ele.        Exp7 ::= Exp7 "<=" Exp8;
Ege.        Exp7 ::= Exp7 ">=" Exp8;
Eplus.      Exp8 ::= Exp8 "+" Exp9;
Eminus.     Exp8 ::= Exp8 "-" Exp9;
Etimes.     Exp9 ::= Exp9 "*" Exp10;
Ediv.       Exp9 ::= Exp9 "/" Exp10;
Emod.       Exp9 ::= Exp9 "%" Exp10;
Etypeconv.  Exp10 ::= "(" Type_specifier ")" Exp10;
Epreinc.    Exp11 ::= "++" Ident;
Epredec.    Exp11 ::= "--" Ident;
Epreop.     Exp11 ::= Unary_operator Exp10;
Efunk.      Exp12 ::= Ident "(" [Exp2] ")";
EfunkNS.    Exp12 ::= Ident "::" Ident "(" [Exp2] ")";
Eselect.    Exp12 ::= Exp12 "." Ident;
Epostinc.   Exp12 ::= Ident "++";
Epostdec.   Exp12 ::= Ident "--";
Evar.       Exp13 ::= Ident;
Econst.     Exp13 ::= Constant;

Efloat.     Constant ::= Double;
Ecfloat.    Constant ::= CFloat;
Ebool.      Constant ::= Boolean;
Eint.       Constant ::= Integer;

coercions Exp 13;
separator Exp2 ",";

Negative.    Unary_operator ::= "-";
Logicalneg.  Unary_operator ::= "!";
